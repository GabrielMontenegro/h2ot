


Network Working Group                                      G. Montenegro
Internet-Draft                                                 Microsoft
Intended status: Informational                               S. Cespedes
Expires: January 2, 2017                            Universidad de Chile
                                                               S. Loreto
                                                                Ericsson
                                                              R. Simpson
                                                        General Electric
                                                               July 2016


                   HTTP/2 for the Internet of Things
                  draft-montenegro-httpbis-h2ot-latest

Abstract

   This document makes the case for HTTP/2 for IoT.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 2, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Montenegro, et al.       Expires January 2, 2017                [Page 1]

Internet-Draft               HTTP/2 for IoT                    July 2016


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Application Transport Alternatives and their Strengths  . . .   4
     2.1.  HTTP/1.1  . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  MQTT  . . . . . . . . . . . . . . . . . . . . . . . . . .   5
     2.3.  CoAP  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     2.4.  Protocols Comparison  . . . . . . . . . . . . . . . . . .   6
   3.  Importance of Protocol Reuse  . . . . . . . . . . . . . . . .   7
   4.  HTTP/2 in IoT . . . . . . . . . . . . . . . . . . . . . . . .   8
   5.  HTTP/2 over UDP - QUIC  . . . . . . . . . . . . . . . . . . .   8
   6.  Profile of HTTP/2 for IoT . . . . . . . . . . . . . . . . . .   9
   7.  Negotiation of HTTP/2 for IoT . . . . . . . . . . . . . . . .  10
   8.  Gateway and Proxying Issues . . . . . . . . . . . . . . . . .  10
   9.  Implementation Considerations . . . . . . . . . . . . . . . .  10
   10. Experimentation and Performance . . . . . . . . . . . . . . .  11
     10.1.  GET Example  . . . . . . . . . . . . . . . . . . . . . .  11
       10.1.1.  HTTP/1.1 . . . . . . . . . . . . . . . . . . . . . .  11
       10.1.2.  HTTP/2 . . . . . . . . . . . . . . . . . . . . . . .  12
       10.1.3.  Comparison . . . . . . . . . . . . . . . . . . . . .  13
   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  13
   12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
     12.1.  Normative References . . . . . . . . . . . . . . . . . .  14
     12.2.  Informative References . . . . . . . . . . . . . . . . .  14
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  15

1.  Introduction

   When the IETF started work on IoT with the 6lowpan WG, it was clear
   that in addition to the lower-layer adaptation work for IPv6, much
   work elsewhere in the stack was necessary.  (In this document, the
   "things" in "IoT" are nodes that are constrained in some manner--
   e.g., cpu, memory, power--such that direct use of unmodified
   mainstream protocols is challenging.)  Once the IPv6 adaptation was
   understood, the next question was what protocols to use above IP for
   different functions and at different layers.  That question may not
   have a single answer that is always best for all scenarios and use
   cases.  There are many such use cases, in accordance with the fact
   that "IoT" means too many things.

   Accordingly, the IoT landscape includes a proliferation of options
   for any particular functionality (transport, encoding, security
   suites, authentication/authorization, etc).  Different vendors and
   standards organizations (or fora) offer IoT solutions by grouping
   these different components into separate stacks.  Even if the



Montenegro, et al.       Expires January 2, 2017                [Page 2]

Internet-Draft               HTTP/2 for IoT                    July 2016


   components have the same name or originate in the same original
   standard (or even code base), each organization adapts it ever so
   slightly to their own goals rendering the resultant components non-
   interoperable.  Many of these components are being created expressly
   for IoT (within the IETF and elsewhere) with the justification that
   the mainstream options could not possibly be usable for IoT
   scenarios, which results in multiple disparate networking and
   software stacks.  Given the incipient state of IoT, for the
   foreseeable future multiple competing stacks will continue to exist
   at least in gateways and cloud elements.  This adds complexity to
   IoT, hence, amplifying the attack surface.  Nevertheless, properly
   configured and implemented, mainstream options may not just be
   workable, but may even be the best option.

   The appearance of one-off stacks (as opposed to a properly configured
   and adapted mainstream stack) is reminiscent of WAP 1.x, a complete
   vertical stack offered for phones as they were starting to access the
   Internet (albeit from within a walled garden) in the late 90's.  At
   that time the IETF and the W3C started efforts to develop the
   mainstream alternatives.  As a result, today no phone uses WAP.
   Phone stacks are mainstream TCP/IP protocols (properly configured and
   adapted, of course).  In contrast, today in IoT we don't just see one
   non-mainstream stack in IoT, but several (as if we had WAP1, WAP2,
   WAP3, etc.).  And we may have to live with them for some time, but it
   is essential to ponder what the mainstream stack might look like if
   we are to eventually reap the benefits of a true Internet of Things
   instead of a not-quite-but-kinda-close-to-Internet-non-interoperable-
   hodge-podge-of-Things.

   HTTP/2 is now widely available as a transport option.  Moreover, the
   ongoing effort to layer HTTP/2 over UDP (i.e., over QUIC) adds a
   useful capability for IoT scenarios.  We show the current suitability
   of HTTP/2 for IoT scenarios and examine possible improvements.

   Let's look at some application communication patterns to establish
   some common language:

   node to node:  A constrained node engages in direct communication
      with another constrained node.

   node to gateway:  A constrained node and a gateway node engage in
      direct communication.  A gateway node is directly on both a
      constrained network (e.g., a lowpan) and on a non-constrained
      network (a normal network using mainstream stack implementations,
      typically connected to the Internet).






Montenegro, et al.       Expires January 2, 2017                [Page 3]

Internet-Draft               HTTP/2 for IoT                    July 2016


   gateway to cloud:  A gateway node (see above) engages in
      communication with unconstrained networks, typically a cloud
      service on the Internet.

   node to cloud:  A node on a constrained network engages in direct
      communcation with unconstrained networks, typically a cloud
      service on the Internet.

   We can further categorize the above communication patterns into two
   basic types of networking exchanges:

   Constrained network scenario:  A constrained network scenario
      includes node to node and node to gateway exchanges.

   Internet scenario:  An Internet scenario includes gateway to cloud
      and node to cloud exchanges.

   This document makes the case for HTTP/2 as the most general protocol
   of choice for Internet of Things applications, suitable for both
   Constrained network scenarios and Internet scenarios.

2.  Application Transport Alternatives and their Strengths

   A recent survey by the Eclipse IoT working group queried IoT
   developers about the protocols and technologies they are using and
   planning to use [Eclipse_survey].  Some of the currently used
   application transport protocols (above the link layer) for IoT
   applications are as follows:

   o  HTTP/1.1 (61% of developers)

   o  MQTT (52% of developers)

   o  CoAP (21% of developers)

   o  HTTP/2 (19% of developers)

   o  Others: In-house, AMQP and XMPP (43% of developers)

   The sections below provide some more details on top-of-the-list
   protocols other than HTTP/2.

2.1.  HTTP/1.1

   HTTP/1.1 is a text-based protocol, and is widely successful as it is
   the basis not just for the web, but for much non-web traffic in the
   internet today.  Most (but not all) of the instances of HTTP today
   version 1.1 as specified in RFC2616.  Since its publication back in



Montenegro, et al.       Expires January 2, 2017                [Page 4]

Internet-Draft               HTTP/2 for IoT                    July 2016


   1999 it has evolved organically, producing countless variations and
   exceptions to its rules.  Modern browser and server implementations
   have very complex and convoluted code to deal with parsing and
   handling the many nuances of the protocol.  Because of all this
   confusion, the HTTPbis working group set out to clarify the existing
   specifications, and after a multi-year effort to clarify its many
   sources of confusion, it has published a cleaner specification in
   RFCs 7230-7235.  In spite of this, the protocol still has a plethora
   of legacy issues and remains too verbose.

   HTTP/1.1 is very clearly a mismatch for the constrained devices and
   networks that characterize IoT.  Despite its shortcomings, it is the
   most popular protocol for IoT applications (61% per the
   aforementioned survey, although the survey does not clarify if this
   is for Internet or constrained network scenarios).  Why would such an
   ill-suited protocol be clearly the most popular for IoT applications?
   It is by far the most commonly known protocol.  It has many
   implementations (many in open source), with massive support in all
   platforms, tools and APIs.  It is easy to find know-how and support.
   In short, it has the power and convenience that comes with being a
   mainstream protocol.

   Another major advantage is that it is the protocol that has the best
   chance of traversing firewalls and middle boxes in the internet due
   to its use of port 80 when in the clear, and, especially, its use of
   port 443 when over TLS.  This is a primary concern in Internet
   scenarios.

2.2.  MQTT

   MQ Telemetry Transport (MQTT) is a publish/subscribe messaging
   protocol running on top of TCP.  It was created by IBM, now being
   standardized by OASIS.  It is popular in the Internet scenario (node
   to cloud, gateway to cloud) and it aims to connect embedded devices
   and networks with applications and middleware.  It is a compact,
   binary protocol, and is very popular in certain application domains.
   It has been known as a protocol suitable to be used in resource
   constrained devices and unreliable networks.

   It is the second most popular protocol in the survey (behind
   HTTP/1.1) with 52% of developers using it.  In the internet scenario,
   however, TLS is mandatory.  In practice, additional TLS overhead is
   required for all Internet scenario exchanges, so all protocols are
   slightly larger and MQTT loses some relative size advantage.  There
   is a spec for MQTT over UDP, but, by far it is most commonly deployed
   over TCP (port 8833 when over TLS, port 1883 without TLS).  Even when
   using TLS, it has the well-known firewall traversal issues common to
   any protocol not over port 443.



Montenegro, et al.       Expires January 2, 2017                [Page 5]

Internet-Draft               HTTP/2 for IoT                    July 2016


2.3.  CoAP

   CoAP is a compact, binary UDP-based protocol based on RESTful
   principles and closely patterned after HTTP.  It has been designed to
   be used in constrained devices and constrained networks.  The
   protocol specification has been published in RFC 7252, although
   additional functionalities such as congestion control, block-wise
   transfer, TCP transfer and HTTP mapping are still being specified.

   The protocol meets IoT requirements through the modification of some
   HTTP functionalities to achieve low-power consumption and operation
   over lossy links.  To aovid undesirable packet fragmentation the CoAP
   specification provides also an upper bound to the message size,
   dictating that a CoAP message, appropriately encapsulated, SHOULD fit
   within a single IP datagram

      If the Path MTU is not known for a destination, an IP MTU of 1280
      bytes SHOULD be assumed; if nothing is known about the size of the
      headers, good upper bounds are 1152 bytes for the message size and
      1024 bytes for the payload size.

   In addition, CoAP may interact easily with HTTP through a proxy
   thanks to the common REST architecture.  CoAP works on port 5683 and
   offers optional reliable delivery (thru a retransmission mechanism),
   support for unicast and multicast (which satisfies group
   communication for IoT), and asynchronous message exchange using
   simple and low complexity headers (a typical CoAP message can be
   between 10 and 20 bytes).

   It is the third most popular protocol in the survey with a 21%
   preference.  Nevertheless, since CoAP is UDP-based, it also suffers
   from firewall traversal issues and lack of integration with existing
   enterprise infrastructures.  There is ongoing work to specify the use
   of CoAP over TCP as well as CoAP over TLS, in an attempt to overcome
   issues with middleboxes and achieve a better integration with web
   environments.

2.4.  Protocols Comparison

   The aformentioned protocols have been compared in both experimental
   and emulated environments.  Previous reports show that performance is
   highly dependent on the network conditions [IEEE_survey]: in good
   link conditions with low packet loss, MQTT delivers packets with
   lower delay than CoAP; however, if packet loss is under 25% and
   messages are of a small size, CoAP demonstrates a better link usage
   than MQTT.  CoAP has also been compared to HTTP/1.1.  In terms of
   power consumption and response time, naturally CoAP behaves better




Montenegro, et al.       Expires January 2, 2017                [Page 6]

Internet-Draft               HTTP/2 for IoT                    July 2016


   than HTTP/1.1 thanks to the reduced packet sizes.  No reports have
   been found comparing MQTT or CoAP to HTTP/2.

3.  Importance of Protocol Reuse

   These protocols often do not exist in a vacuum.  Typically, they are
   mandated as part of a given stack specified by any of several IoT
   consortia (e.g., OFC, AllJoyn, Thread Group, etc).  We know that
   these multiple IoT protocols (and stacks) provide very useful sources
   of information for prying eyes (See "US intelligence chief says we
   might use the IoT to spy on you" at http://www.wired.com/2012/03/
   petraeus-tv-remote/).  Security and privacy issues are exacerbated
   because:

   o  IoT is the worst of all security worlds: (1) constraints push
      devices into taking shortcuts and (2) there is less physical
      security with such devices (after installation they are typically
      reachable by unfriendly hands).

   o  Each of these protocols is an island with its own security
      measures (or lack thereof) and very limited review.

   The previous two points can be summarized as follows:

   A security and privacy environment even more challenging than usual:

      This is receiving much attention from the research and
      standardization communities.  It is the sort of challenge that
      stimulates researchers into high gear.  It is a daunting problem
      for sure, but at least it is on the radar of folks and consortia
      working on IoT.  Nevertheless, many issues will arise because of
      this (e.g., discovery of serious flaws in IoT devices like locks
      is a common occurrence).

   Many different protocol stacks at play:  This is a much more
      worrisome issue if one considers that a vast majority of issues
      arising with security have less to do with cryptography (the first
      point above) and more to do with software engineering, and silly
      bugs.  Each stack added creates more attack surface.  At the same
      time, each one of these stacks gather less attention and scrutiny
      than software used for mainstream scenarios (such as the web).  We
      have seen no shortage of issues on OpenSSL and similar heavily-
      used software.  We can expect much worse from stacks that are not
      nearly as well exercised nor examined.  And if we have not one,
      but several of these stacks untested by millions of eyeballs, we
      are inviting disaster.





Montenegro, et al.       Expires January 2, 2017                [Page 7]

Internet-Draft               HTTP/2 for IoT                    July 2016


   Furthermore, multiple stacks defeat the purpose of the "I" in IoT:
   interoperability.  This goes back to the issue of security.  A recent
   Harvard report on the state of surveillance and erosion of privacy
   [Going_Dark] concludes among its findings that the projected
   substantial growth of IoT will drastically change surveillance
   (surveillance is not merely limited to government agencies of
   course), and that the fragmentation of ecosystems hinders the
   deployment of countermeasures (e.g., end-to-end encryption) as that
   requires more coordination and standardization than currently
   available.  This not only gives rise to rogue surveillance sites such
   as Shodan (https://www.shodan.io/), but also represents a great
   opportunity for government agencies' surveillance needs [Going_Dark].

   Reusing mainstream protocols affords the benefits of using better-
   known technology, with easier access to reference implementations
   (including open source), hiring of people with the required skills
   and experience, training, etc.  They are basically the same arguments
   that were used originally to justify the use of IP-based networking
   over custom-built stacks.  The message was heard loud and clear but
   for the most part it was applied to only a limited set of components
   (e.g., IP, UDP, DTLS).  Other components are still being custom built
   (albeit, on top of IP).

4.  HTTP/2 in IoT

   TODO

5.  HTTP/2 over UDP - QUIC

   QUIC (Quick UDP Internet Connections) is a new multiplexed transport
   protocol designed to run in user space above UDP, optimized for
   HTTP/2 semantics.  The protocol is still in its early days and the
   standardization work in IETF has just started.

   QUIC provides several functionalities already present in TCP, TLS and
   HTTP/2

   o  connection semantics, reliability, and congestion control
      equivalent to TCP.

   o  security equivalent to TLS

   o  multiplexing and flow control equivalent to HTTP/2

   Where functionality is similar to that of existing protocols, it has
   been re-designed to be more efficient.





Montenegro, et al.       Expires January 2, 2017                [Page 8]

Internet-Draft               HTTP/2 for IoT                    July 2016


   To improve the Connection Establishement latency QUIC combines the
   crypto and transport handshakes, reducing the number of roundtrips
   required for setting up a secure connection.  QUIC connections are
   commonly 0-RTT, meaning that on most QUIC connections, data can be
   sent immediately without waiting for a reply from the server, as
   compared to the 1-3 roundtrips required for TCP+TLS before
   application data can be sent.

   QUIC has been designed to provide richer information to congestion
   control algorithms than TCP, moreover the actual congestion control
   is plugable in QUIC.

   Even if QUIC has been initially designed with HTTP/2 as the primary
   application protocol to support, it is meant to become a modern
   general-purpose transport protocol.  The IETF standization effort
   will also focus on describing the mapping of HTTP/2 semantics using
   QUIC specifically with the goal of minimizing web latency using QUIC.
   This mapping will accommodate the extension mechanisms defined in the
   HTTP/2 specification.

   QUIC also dictates that packets should be sized to fit within the
   path's MTU to avoid IP fragmentation.  However path MTU discovery is
   a work in progress, and the current QUIC implementation uses a
   1350-byte maximum QUIC packet size for IPv6, 1370 for IPv4.

6.  Profile of HTTP/2 for IoT

   HTTP/2 has many negotiable settings that can improve its performance
   for IoT applications by reducing bandwidth, codespace, and RAM
   requirements.  Specifically, the following settings and values have
   been found to be useful in IoT applications:

   o  SETTINGS_ENABLE_PUSH: this functionality may not be required in
      some IoT applications

   o  SETTINGS_HEADER_TABLE_SIZE: this setting allows hosts to limit the
      size of the header compression table used for decoding, reducing
      required RAM, but potentially increasing bandwidth requirements

   o  SETTINGS_INITIAL_WINDOW_SIZE: this setting allows hosts to limit
      the flow control window, potentially reducing buffer requirements
      at the expense of potentially underutilized bandwidth-delay
      products

   o  SETTINGS_MAX_CONCURRENT_STREAMS: this settings allows hosts to
      limit the number of simulataneous streams for a connection





Montenegro, et al.       Expires January 2, 2017                [Page 9]

Internet-Draft               HTTP/2 for IoT                    July 2016


   o  SETTINGS_MAX_FRAME_SIZE: this setting allows hosts to specify the
      largest frame size they are willing to receive.  Somewhat
      counterintuitively, IoT hosts may wish to leave this value large
      and rely on flow control to avoid unnecessary framing overhead.

   o  SETTINGS_MAX_HEADER_LIST_SIZE: this setting allows hosts to limit
      the maximum size of the header list they are willing to receive

7.  Negotiation of HTTP/2 for IoT

   TODO

8.  Gateway and Proxying Issues

   The proliferation of application and security protocols in the IoT
   has produced the deployments of island of IoT device each using one
   of the several protocols available.  However those usually an IoT
   deployment need to communicate to another one, or at least need to
   communicate with the Web both because they have to upload data to the
   Cloud or because usually they are controlled by a Web application.

   The need to communicate is facilitated by Cross-protocol proxy or
   gateway translating a protocol syntax and semantic in another one.
   However the presence of Cross-Protocol or Application gateways has at
   least to main drawbacks that need to be analyzed and addressed
   carefully.

   o  while the translation maybe trivial for the basic scenarios, there
      are a lot of cases where the translation can lead to a lost of
      information or an incompatibility due to the different way
      differnt proxies make the translation.

   o  The presence of a Cross-Protocol may also become a critical point
      for the security.

9.  Implementation Considerations

   In addition to underlying stack considerations such as IPv4, IPv6,
   TCP, and TLS implementations, there are several implementation
   considerations for HTTP/2 for IoT.

   A primary consideration is the number of allowed simultaneous HTTP/2
   connections.  As each connection has associated overhead, as well as
   overhead for each stream, constrained hosts may wish to limit their
   number of simultaneous connections.  However, implementers should
   consider that some popular browsers require more than one connection
   to operate.




Montenegro, et al.       Expires January 2, 2017               [Page 10]

Internet-Draft               HTTP/2 for IoT                    July 2016


   In addition to minimizing the number of simultaneous connections,
   hosts should consider leaving connections open if there is a
   possibility of further communication with the remote peer.  HTTP/2
   contains mechanisms such as PING to periodically check idle
   connections.  Leaving established connections open when there is a
   possibility of future communication allows connection establishment
   overhead (and potentially TLS session establishment overhead) to be
   avoided.

   Should TLS be used, implementers may wish to consider utilizing
   hardware-based encryption to further reduce codespace and RAM
   requirements.

10.  Experimentation and Performance

   This section presents some simple results obtained using the
   Deuterium HTTP/2 library [Deuterium] and is not intended to be
   complete, but rather a start for discussion.  From an IoT
   perspective, the reduced message sizes presented help to conserve
   both bandwidth and battery life, as well as potentially saving some
   memory/buffer space.

   The results presented in this section make the following assumptions
   and considerations:

   o  Overhead from TCP and TLS are ignored

   o  An attempt to minimize the headers used has been made while still
      maintaining RFC compliance

   o  No entries are made into the HTTP/2 dynamic table, thus removing
      some potential optimization

   o  Connection establishment and teardown have been ignored, though
      clearly these are important considerations for IoT application
      protocols

10.1.  GET Example

   This first example compares and contrasts a GET method to a resource
   containing an XML representation of a simple switch using HTTP/1.1
   and HTTP/2.

10.1.1.  HTTP/1.1

   1.  Client sends (47 octets):





Montenegro, et al.       Expires January 2, 2017               [Page 11]

Internet-Draft               HTTP/2 for IoT                    July 2016


   4745 5420 2f6f 6e6f 6666 2048 5454 502f 312e 310d
   0a48 6f73 743a 2066 6f6f 0d0a 4163 6365 7074 3a20
   2a2f 2a0d 0a0d 0a

       In ASCII:

   GET /onoff HTTP/1.1\r\n
   Host: foo\r\n
   Accept: */*\r\n
   \r\n

   2.  Server sends (107 + 36 octets):

   4854 5450 2f31 2e31 2032 3030 204f 4b0d 0a44 6174
   653a 204d 6f6e 2c20 3039 204d 6172 2032 3031 3520
   3036 3a32 363a 3434 2047 4d54 0d0a 436f 6e74 656e
   742d 4c65 6e67 7468 3a20 3336 0d0a 436f 6e74 656e
   742d 5479 7065 3a20 6170 706c 6963 6174 696f 6e2f
   786d 6c0d 0a0d 0a
   3c4f 6e4f 6666 3e0a 093c 7374 6174 653e 6f66 663c
   2f73 7461 7465 3e0a 3c2f 4f6e 4f66 663e

       In ASCII:

   HTTP/1.1 200 OK\r\n
   Date: Mon, 09 Mar 2015 06:26:44 GMT\r\n
   Content-Length: 36\r\n
   Content-Type: application/xml\r\n
   \r\n
   <OnOff>\n
   \t<state>off</state>\n
   </OnOff>

10.1.2.  HTTP/2

   1.  Client sends (34 octets):

   0000 1901 0500 0000 01
   8286 0585 60f5 1e59 7f01 8294 e70f 0489 f963 e7ef
   b401 5c00 07

       Representing:

   :method: GET
   :path: /onoff
   :scheme: http
   :authority: foo
   accept: */*



Montenegro, et al.       Expires January 2, 2017               [Page 12]

Internet-Draft               HTTP/2 for IoT                    July 2016


   2.  Server sends (54 octets):

   0000 2d01 0400 0000 01
   880f 1296 d07a be94 03ea 681d 8a08 016d 4039 704e
   5c69 a531 68df 0f10 8b1d 75d0 620d 263d 4c79 a68f
   0f0d 8265 cf

       Representing:

   :status: 200
   content-type: application/xml
   content-length: 36
   date: Mon, 09 Mar 2015 06:26:44 GMT

   3.  Server sends (45 octets):

   0000 2400 0100 0000 01
   3c4f 6e4f 6666 3e0a 093c 7374 6174 653e 6f66 663c
   2f73 7461 7465 3e0a 3c2f 4f6e 4f66 663e

       Representing:

   <OnOff>
   \t<state>off</state>
   </OnOff>

10.1.3.  Comparison

   In total and ignoring the payload (36 octets), the HTTP/2 flow is 37%
   smaller than the HTTP/1.1 flow.

   The use of additional headers, particularly common headers that are
   present in the HTTP/2 static table, will result in greater savings.

   While not compared here, HTTP/2's ability to reuse connections for
   multiple streams reduces connection establishment overhead, such as
   TCP connection establishment and TLS session establishment.

11.  Acknowledgements

   This document was produced using the xml2rfc tool [RFC2629].

12.  References








Montenegro, et al.       Expires January 2, 2017               [Page 13]

Internet-Draft               HTTP/2 for IoT                    July 2016


12.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616,
              DOI 10.17487/RFC2616, June 1999,
              <http://www.rfc-editor.org/info/rfc2616>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

12.2.  Informative References

   [RFC2629]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629,
              DOI 10.17487/RFC2629, June 1999,
              <http://www.rfc-editor.org/info/rfc2629>.

   [Deuterium]
              Simpson, R., "Deuterium HTTP/2 Library", June 2016,
              <http://robbysimpson.org/deuterium/>.

   [Eclipse_survey]
              Eclipse Foundation, "IoT Developer Survey", April 2016.

   [IEEE_survey]
              Al-Fuqaha et al., A., "Internet of Things: A Survey on
              Enabling Technologies, Protocols, and Applications",  ,
              November 2015.

   [Going_Dark]
              "Dont Panic: Making Progress on Going Dark Debate",
              February 2016, <https://cyber.law.harvard.edu/pubrelease/
              dont-panic/
              Dont_Panic_Making_Progress_on_Going_Dark_Debate.pdf>.





Montenegro, et al.       Expires January 2, 2017               [Page 14]

Internet-Draft               HTTP/2 for IoT                    July 2016


   [Clapper]  "US intelligence chief: we might use the internet of
              things to spy on you", February 2016,
              <http://www.theguardian.com/technology/2016/feb/09/
              internet-of-things-smart-home-devices-government-
              surveillance-james-clapper>.

Authors' Addresses

   Gabriel Montenegro
   Microsoft

   Email: Gabriel.Montenegro@microsoft.com


   Sandra Cespedes
   Universidad de Chile

   Email: scespedes@ing.uchile.cl


   Salvatore Loreto
   Ericsson

   Email: salvatore.loreto@ericsson.com


   Robby Simpson
   General Electric

   Email: rsimpson@gmail.com





















Montenegro, et al.       Expires January 2, 2017               [Page 15]