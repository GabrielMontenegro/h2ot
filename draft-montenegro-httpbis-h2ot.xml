<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC0793 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml'>
  <!ENTITY RFC1738 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1738.xml'>
  <!ENTITY RFC1950 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1950.xml'>
  <!ENTITY RFC2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY RFC2285 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2285.xml'>
  <!ENTITY RFC2616 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
  <!ENTITY RFC2617 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml'>
  <!ENTITY RFC2629 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml'>
  <!ENTITY RFC2818 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml'>
  <!ENTITY RFC4366 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4366.xml'>
  <!ENTITY RFC4559 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4559.xml'>
  <!ENTITY RFC5246 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'>
  <!ENTITY RFC6454 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6454.xml'>
  <!ENTITY RFC6455 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6455.xml'>
  <!ENTITY RFC7230 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml'>
  <!ENTITY RFC7231 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml'>
  ]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xml"?>

<?rfc toc="yes" symrefs="yes"?>

<rfc ipr="trust200902" category="info" docName="draft-montenegro-httpbis-h2ot-latest">
  <front>
	  <title abbrev="HTTP/2 for IoT">HTTP/2 for the Internet of Things</title>

    <author initials="G." surname="Montenegro" fullname="Gabriel Montenegro">
      <organization>Microsoft</organization>
      <address>
        <email>Gabriel.Montenegro@microsoft.com</email>
      </address>
    </author>

    <author initials="S." surname="Cespedes" fullname="Sandra Cespedes">
      <organization>Universidad de Chile</organization>
      <address>
        <email>scespedes@ing.uchile.cl</email>
      </address>
    </author>

    <author initials="S." surname="Loreto" fullname="Salvatore Loreto">
      <organization>Ericsson</organization>
      <address>
        <email>salvatore.loreto@ericsson.com</email>
      </address>
    </author>
    
    <author initials="R." surname="Simpson" fullname="Robby Simpson">
      <organization>General Electric</organization>
        <address>
          <email>rsimpson@gmail.com</email>
        </address>
    </author>
    
    <date month="July" year="2016" />
    <area>Applications</area>
    <keyword>HTTP, IoT</keyword>
    <abstract>
	    <t>
This document makes the case for HTTP/2 for IoT. 
	    </t>

    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
	<t>
    When the IETF started work on IoT with the 6lowpan WG, it was clear that in addition to the lower-layer adaptation work 
    for IPv6, much work elsewhere in the stack was necessary. (In this
    document, the "things" in "IoT" are nodes that are constrained in some manner--e.g., cpu, memory, power--such that direct 
    use of unmodified mainstream protocols is challenging.) Once the IPv6 adaptation was understood, the next question 
    was what protocols to use above IP for different functions and at different layers. 
    That question may not have a single answer that is always best for all scenarios and use
    cases. There are many such use cases, in accordance with the fact that "IoT" means too many things.     
</t>

<t> 
    Accordingly, the IoT landscape includes a proliferation of options for any particular functionality 
    (transport, encoding, security suites, authentication/authorization, etc). Different vendors and standards
    organizations (or fora) offer IoT solutions by grouping these different components into separate stacks.
    Even if the components have the same name or originate in the same original standard (or even code base), each organization adapts it 
    ever so slightly to their own goals rendering the resultant components non-interoperable. 
    Many of these components are being created expressly for IoT (within the IETF and elsewhere) with the 
    justification that the mainstream options could not possibly be usable for IoT scenarios, 
    which results in multiple disparate networking and software stacks. Given the incipient state of IoT,
    for the foreseeable future multiple competing stacks will continue to exist at least in gateways and 
    cloud elements.
    This adds complexity to IoT,
    hence, amplifying the attack surface. Nevertheless, properly configured and implemented, 
    mainstream options may not just be workable, but may even be the best option. 
</t>

<t> 
    The appearance of one-off stacks (as opposed to a properly configured and adapted mainstream stack) is reminiscent of 
    WAP 1.x, a complete vertical stack offered for phones as they were starting to access the Internet (albeit from within 
    a walled garden) in the late 90's. At 
    that time the IETF and the W3C started efforts to develop the mainstream alternatives. As a result, today no phone uses WAP. Phone 
    stacks are mainstream TCP/IP protocols (properly configured and adapted, of course). In contrast, today in IoT 
    we don't just see one non-mainstream
    stack in IoT, but several (as if we had WAP1, WAP2, WAP3, etc.). And we may have to live with them for some time,
    but it is essential to ponder what the mainstream stack might look like if we are to eventually reap the benefits of 
    a true Internet of Things instead of a not-quite-but-kinda-close-to-Internet-non-interoperable-hodge-podge-of-Things.
</t>
<t> 
    HTTP/2 is now widely available as a transport option. Moreover, the ongoing effort to layer HTTP/2 
    over UDP (i.e., over QUIC) adds a useful capability for IoT scenarios. We show the current suitability of 
    HTTP/2 for IoT scenarios and examine possible improvements.    
    </t>

    <t>
    Let's look at some application communication patterns to establish some
    common language:
    
   <list style='hanging'>
		<t hangText="node to node:"> 
			A constrained node engages in direct communication with another constrained node.
		</t>
    
		<t hangText="node to gateway:"> 
			A constrained node and a gateway node engage in direct communication. A gateway node is directly on both a constrained network
      (e.g., a lowpan) and on a non-constrained network (a normal network using mainstream stack implementations, typically connected 
      to the Internet).
		</t>
    
		<t hangText="gateway to cloud:">
			A gateway node (see above) engages in communication with unconstrained networks, typically a cloud service on the Internet.
		</t>

		<t hangText="node to cloud:">			
      A node on a constrained network engages in direct communcation with unconstrained networks, typically a cloud service on the Internet.
		</t>
	</list>   
	</t>

	<t>
    We can further categorize the above communication patterns into two basic types of networking exchanges:

   <list style='hanging'>
		<t hangText="Constrained network scenario:"> 
			A constrained network scenario includes node to node and node to gateway exchanges.
		</t>
    
		<t hangText="Internet scenario:"> 
			An Internet scenario includes gateway to cloud and node to cloud exchanges.
		</t>
	</list> 
	</t>
  
	<t>
    This document makes the case for HTTP/2 as the most general protocol of choice for Internet of Things applications,
    suitable for both Constrained network scenarios and Internet scenarios.
	</t>
	</section>


<section title="Application Transport Alternatives and their Strengths"> 
  <t>
		A recent survey by the Eclipse IoT working group queried IoT developers about the protocols and technologies they are using 
    and planning to use <xref target="Eclipse_survey"></xref>. Some of the currently used application transport protocols 
    (above the link layer) for IoT applications are as follows:
    
  <list style='symbols'>
		<t> 
			HTTP/1.1 (61% of developers)
		</t>
		<t> 
			MQTT (52% of developers)
		</t>
		<t> 
			CoAP (21% of developers)
		</t>
		<t> 
			HTTP/2 (19% of developers)
		</t>
		<t> 
			Others: In-house, AMQP and XMPP (43% of developers)
		</t>
	</list>
  
	</t>
  
  <t>
    The sections below provide some more details on top-of-the-list protocols other than HTTP/2.
  </t>   
  
    <section title="HTTP/1.1"> 
		<t> 
      HTTP/1.1 is a text-based protocol, and is widely successful as it is the basis not just for the web, but for much non-web traffic in the internet today.
      Most (but not all) of the instances of HTTP today version 1.1 as specified in RFC2616. Since its publication back in 1999 it has evolved organically,
      producing countless variations and exceptions to its rules. Modern browser and server implementations have very complex and convoluted
      code to deal with parsing and handling the many nuances of the protocol. Because of all this confusion, the HTTPbis working group set out to
      clarify the existing specifications, and after a multi-year effort to clarify its many sources of confusion, it has published a cleaner specification
      in RFCs 7230-7235. In spite of this, the protocol still has a plethora of legacy issues and remains too verbose.
		</t>

		<t>       
      HTTP/1.1 is very clearly a mismatch for the constrained devices and networks that characterize IoT. Despite its shortcomings, it is the most 
      popular protocol for IoT applications (61% per the aforementioned survey, although the survey does not clarify if this is for
      Internet or constrained network scenarios). Why would such an ill-suited protocol be clearly the most
      popular for IoT applications? It is by far the most commonly known protocol. It has
      many implementations (many in open source), with massive support in all platforms, tools and APIs. It is easy to find know-how and support. 
      In short, it has the power and convenience that comes with being a mainstream protocol. 
		</t>
    
		<t>       
      Another major advantage is that it is the protocol that has the best chance of traversing firewalls and middle boxes in the internet due 
      to its use of port 80 when in the clear, and, especially, its use of port 443 when over TLS. This is a primary concern in Internet scenarios.
		</t>    
    </section>

    <section title="MQTT"> 
		<t> 
      MQ Telemetry Transport (MQTT) is a publish/subscribe messaging protocol running on top of TCP. It was created by IBM, now being standardized
      by OASIS. It is popular in the Internet scenario (node to cloud, gateway to cloud) and it aims to connect embedded devices and networks with applications
and middleware. It is a compact, binary protocol, and is very popular in certain application domains. It has been known as a protocol suitable to be used in 
resource constrained devices and unreliable networks.
		</t>

		<t>       
      It is the second most popular protocol in the survey (behind HTTP/1.1) with 52% of developers using it. In the internet scenario,
      however, TLS is mandatory. In practice, additional TLS overhead is required for all Internet scenario exchanges, so all
      protocols are slightly larger and MQTT loses some relative size advantage. There is a spec for MQTT over UDP, but, by far 
      it is most commonly deployed over TCP (port 8833 when over TLS,
      port 1883 without TLS). Even when using TLS, it has the well-known firewall traversal issues common to any protocol not over port 
      443.
		</t>
		
	</section>

    <section title="CoAP"> 
		<t> 
      CoAP is a compact, binary UDP-based protocol based on RESTful principles and closely patterned after HTTP. 
      It has been designed to be used in constrained devices and constrained networks. 
      The protocol specification has been published in RFC 7252, although additional functionalities such as congestion control, 
      block-wise transfer, TCP transfer and HTTP mapping are still being specified. 
      </t>


      <t>
      The protocol meets IoT requirements through the modification of some HTTP functionalities to achieve low-power consumption and operation over lossy links.
      To aovid undesirable packet fragmentation the CoAP specification provides also an upper bound to the message size, dictating that a CoAP message,
      appropriately encapsulated, SHOULD fit within a single IP datagram

      <list style='hanging'>
		<t>
                  If the Path MTU is not known for a destination, an IP MTU of 1280 bytes SHOULD be assumed; if nothing is known about the size of the
                  headers, good upper bounds are 1152 bytes for the message size and 1024 bytes for the payload size. 
		</t>
      </list>
   

 
      In addition, CoAP may interact easily with HTTP through a proxy thanks to the common REST architecture. CoAP works on port 5683 and offers optional reliable 
      delivery (thru a retransmission mechanism), support for unicast and multicast (which satisfies group communication for IoT), and asynchronous message exchange 
      using simple and low complexity headers (a typical CoAP message can be between 10 and 20 bytes). 
      </t>
      <t>
      It is the third most popular protocol in the survey with a 21% preference. Nevertheless, since CoAP is UDP-based, it also suffers from firewall traversal issues and lack of integration with existing enterprise infrastructures. There is ongoing work to specify the use of CoAP over TCP as well as CoAP over TLS, in an attempt to overcome issues with middleboxes and achieve a better integration with web environments.
		</t>

    </section>
    
 <section title="Protocols Comparison"> 
	<t>
    The aformentioned protocols have been compared in both experimental and emulated environments. Previous reports show that performance is highly dependent 
    on the network conditions <xref target="IEEE_survey"></xref>: in good link conditions with low packet loss, MQTT delivers packets with lower delay than CoAP; 
     however, if packet loss is under 25% and messages are of a small size, CoAP demonstrates a better link usage than MQTT. CoAP has also been compared to HTTP/1.1. 
     In terms of power consumption and response time, naturally CoAP behaves better than HTTP/1.1 thanks to the reduced packet sizes. No reports have been found 
     comparing MQTT or CoAP to HTTP/2.
    </t>
 </section>
   
</section>

<section title="Importance of Protocol Reuse"> 
  <t>
    These protocols often do not exist in a vacuum. Typically, they are mandated as part of a given stack specified by
    any of several IoT consortia (e.g., OFC, AllJoyn, Thread Group, etc). We know that these multiple IoT protocols
    (and stacks) provide very useful sources of information for prying eyes (See “US intelligence chief says we might use the IoT to spy on you” 
    at http://www.wired.com/2012/03/petraeus-tv-remote/). Security and privacy issues are exacerbated because:
    
  <list style='symbols'>
		<t> 
			IoT is the worst of all security worlds: (1) constraints push devices into taking shortcuts and
      (2) there is less physical security with such devices (after installation they are typically reachable by unfriendly hands).
		</t>
		<t> 
			Each of these protocols is an island with its own security measures (or lack thereof) and very limited review. 
		</t>
	</list>
  </t>
  <t>
    The previous two points can be summarized as follows:
    
   <list style='hanging'>
		<t hangText="A security and privacy environment even more challenging than usual:"> 
			This is receiving much attention from the research and standardization communities. It is the sort of challenge that stimulates researchers 
                        into high gear. It is a daunting problem for sure, but at least it is on the radar of folks and consortia working on IoT. Nevertheless, 
                        many issues will arise because of this (e.g., discovery of serious flaws in IoT devices like locks is a common occurrence).
		</t>
		<t hangText="Many different protocol stacks at play:"> 
			This is a much more worrisome issue if one considers that a vast majority of issues arising with security have less to do with cryptography
      (the first point above) and more to do with software engineering, and silly bugs. Each stack added creates more attack surface. At the same time, 
     each one of these stacks gather less attention and scrutiny than software used for mainstream scenarios (such as the web). We have seen no shortage of issues 
     on OpenSSL and similar heavily-used software. We can expect much worse from stacks that are not nearly as well exercised nor examined. And if we have not one, 
      but several of these stacks untested by millions of eyeballs, we are inviting disaster.
		</t>
	</list> 
  </t>
  <t>
    Furthermore, multiple stacks defeat the purpose of the “I” in IoT: interoperability. This goes back to the issue of security. A recent Harvard report on the state 
    of surveillance and erosion of privacy <xref target="Going_Dark"></xref> concludes among its findings that the projected substantial growth of IoT will drastically
    change surveillance (surveillance is not merely limited to government agencies of course), and that the fragmentation of ecosystems hinders the deployment of 
    countermeasures (e.g., end-to-end encryption) as that requires more coordination and standardization than currently available. This not only gives rise to rogue 
    surveillance sites such as Shodan (https://www.shodan.io/), but also represents a great opportunity for government agencies’ surveillance needs 
    <xref target="Going_Dark"></xref>. 
  </t>
  <t>
    Reusing mainstream protocols affords the benefits of using better-known technology, with easier access to reference implementations (including open source), hiring of people with the required skills and experience, training, etc. They are basically the same arguments that were used originally to justify the use of IP-based networking over custom-built stacks. The message was heard loud and clear but for the most part it was applied to only a limited set of components (e.g., IP, UDP, DTLS). Other components are still being custom built (albeit, on top of IP). 
  </t>
</section>

<section title="HTTP/2 in IoT"> 
  <t>
    TODO
  </t>
</section>


<section title="HTTP/2 over UDP - QUIC"> 
  <t>
    QUIC (Quick UDP Internet Connections) is a new multiplexed transport protocol designed to run in user space above UDP, optimized for HTTP/2 semantics. The protocol
    is still in its early days and the standardization work in IETF has just started.</t>

  <t>QUIC provides several functionalities already present in TCP, TLS and HTTP/2

  <list style='symbols'>
		<t> connection semantics, reliability, and congestion control equivalent to TCP.</t>
		<t> security equivalent to TLS </t>
		<t> multiplexing and flow control equivalent to HTTP/2</t>
	</list>

   </t>

   <t>Where functionality is similar to that of existing protocols, it has been re-designed to be more efficient.</t>

   <t>To improve the Connection Establishement latency QUIC combines the crypto and transport handshakes, reducing the
   number of roundtrips required for setting up a secure connection. QUIC connections are commonly 0-RTT, meaning that on most QUIC
   connections, data can be sent immediately without waiting for a reply from the server, as compared to the 1-3 roundtrips required for
   TCP+TLS before application data can be sent.</t>

   <t>QUIC has been designed to provide richer information to congestion control algorithms than TCP, moreover the actual congestion control
   is plugable in QUIC.</t> 

   <t>Even if QUIC has been initially designed with HTTP/2 as the primary application protocol to support, it is meant to become a modern general-purpose transport
    protocol. The IETF standization effort will also focus on describing the mapping of HTTP/2 semantics using QUIC specifically with the goal of minimizing web 
    latency using QUIC. This mapping will accommodate the extension mechanisms defined in the HTTP/2 specification.</t>

   <t>QUIC also dictates that packets should be sized to fit within the path's MTU to avoid IP fragmentation. However path MTU discovery is a work in
   progress, and the current QUIC implementation uses a 1350-byte maximum QUIC packet size for IPv6, 1370 for IPv4.</t>

</section>



<section title="Profile of HTTP/2 for IoT"> 
  <t>HTTP/2 has many negotiable settings that can improve its performance for IoT applications by reducing bandwidth, codespace, and RAM requirements. Specifically, the following settings and values have been found to be useful in IoT applications:
    <list style='symbols'>
      <t> SETTINGS_ENABLE_PUSH: this functionality may not be required in some IoT applications </t>
      <t> SETTINGS_HEADER_TABLE_SIZE: this setting allows hosts to limit the size of the header compression table used for decoding, reducing required RAM, but potentially increasing bandwidth requirements </t>
      <t> SETTINGS_INITIAL_WINDOW_SIZE: this setting allows hosts to limit the flow control window, potentially reducing buffer requirements at the expense of potentially underutilized bandwidth-delay products </t>
      <t> SETTINGS_MAX_CONCURRENT_STREAMS: this settings allows hosts to limit the number of simulataneous streams for a connection </t>
      <t> SETTINGS_MAX_FRAME_SIZE: this setting allows hosts to specify the largest frame size they are willing to receive. Somewhat counterintuitively, IoT hosts may wish to leave this value large and rely on flow control to avoid unnecessary framing overhead. </t>
      <t> SETTINGS_MAX_HEADER_LIST_SIZE: this setting allows hosts to limit the maximum size of the header list they are willing to receive </t>
    </list>
  </t>
</section>

<section title="Negotiation of HTTP/2 for IoT"> 
  <t>
    TODO
  </t>
</section>

<section title="Gateway and Proxying Issues"> 

  <t>The proliferation of application and security protocols in the IoT has produced the deployments of island of IoT device each using one of the several protocols
     available. However those usually an IoT deployment need to communicate to another one, or at least need to communicate with the Web both because they have to upload
     data to the Cloud or because usually they are controlled by a Web application.</t>

  <t>The need to communicate is facilitated by Cross-protocol proxy or gateway translating a protocol syntax and semantic in another one. However the presence of 
     Cross-Protocol or Application gateways has at least to main drawbacks that need to be analyzed and addressed carefully.

      <list style='symbols'>
		<t> while the translation maybe trivial for the basic scenarios, there are a lot of cases where the translation can lead to a lost of information
                    or an incompatibility due to the different way differnt proxies make the translation.</t>

		<t> The presence of a Cross-Protocol may also become a critical point for the security.</t>
	</list>
     </t> 

</section>

<section title="Implementation Considerations"> 
  <t> In addition to underlying stack considerations such as IPv4, IPv6, TCP, and TLS implementations, there are several implementation considerations for HTTP/2 for IoT. </t>
  
  <t> A primary consideration is the number of allowed simultaneous HTTP/2 connections. As each connection has associated overhead, as well as overhead for each stream, constrained hosts may wish to limit their number of simultaneous connections. However, implementers should consider that some popular browsers require more than one connection to operate. </t>

  <t> In addition to minimizing the number of simultaneous connections, hosts should consider leaving connections open if there is a possibility of further communication with the remote peer. HTTP/2 contains mechanisms such as PING to periodically check idle connections. Leaving established connections open when there is a possibility of future communication allows connection establishment overhead (and potentially TLS session establishment overhead) to be avoided. </t>

  <t> Should TLS be used, implementers may wish to consider utilizing hardware-based encryption to further reduce codespace and RAM requirements. </t>
</section>

<section title="Experimentation and Performance"> 
  <t> This section presents some simple results obtained using the Deuterium HTTP/2 library <xref target="Deuterium" /> and is not intended to be complete, but rather a start for discussion. From an IoT perspective, the reduced message sizes presented help to conserve both bandwidth and battery life, as well as potentially saving some memory/buffer space. </t>

  <t> The results presented in this section make the following assumptions and considerations:
    <list style='symbols'>
      <t> Overhead from TCP and TLS are ignored </t>
      <t> An attempt to minimize the headers used has been made while still maintaining RFC compliance </t>
      <t> No entries are made into the HTTP/2 dynamic table, thus removing some potential optimization </t>
      <t> Connection establishment and teardown have been ignored, though clearly these are important considerations for IoT application protocols </t>
    </list>
  </t>

  <section title="GET Example"> 
    <t> This first example compares and contrasts a GET method to a resource containing an XML representation of a simple switch using HTTP/1.1 and HTTP/2. </t>
    
    <section title="HTTP/1.1">
      <t>
      <list style='numbers'>
        <t> Client sends (47 octets):
          <figure>
            <artwork><![CDATA[
4745 5420 2f6f 6e6f 6666 2048 5454 502f 312e 310d
0a48 6f73 743a 2066 6f6f 0d0a 4163 6365 7074 3a20
2a2f 2a0d 0a0d 0a
            ]]></artwork>
          </figure>
          In ASCII:
          <figure>
            <artwork><![CDATA[
GET /onoff HTTP/1.1\r\n
Host: foo\r\n
Accept: */*\r\n
\r\n
            ]]></artwork>
          </figure>
        </t>
        <t> Server sends (107 + 36 octets):
          <figure>
            <artwork><![CDATA[
4854 5450 2f31 2e31 2032 3030 204f 4b0d 0a44 6174
653a 204d 6f6e 2c20 3039 204d 6172 2032 3031 3520
3036 3a32 363a 3434 2047 4d54 0d0a 436f 6e74 656e
742d 4c65 6e67 7468 3a20 3336 0d0a 436f 6e74 656e
742d 5479 7065 3a20 6170 706c 6963 6174 696f 6e2f
786d 6c0d 0a0d 0a
3c4f 6e4f 6666 3e0a 093c 7374 6174 653e 6f66 663c
2f73 7461 7465 3e0a 3c2f 4f6e 4f66 663e 
            ]]></artwork>
          </figure>
          In ASCII:
          <figure>
            <artwork><![CDATA[
HTTP/1.1 200 OK\r\n
Date: Mon, 09 Mar 2015 06:26:44 GMT\r\n
Content-Length: 36\r\n
Content-Type: application/xml\r\n
\r\n
<OnOff>\n
\t<state>off</state>\n
</OnOff>
            ]]></artwork>
          </figure>
        </t>
      </list>
      </t>
    </section>
    
    <section title="HTTP/2">
      <t>
      <list style='numbers'>
        <t> Client sends (34 octets):
          <figure>
            <artwork><![CDATA[
0000 1901 0500 0000 01
8286 0585 60f5 1e59 7f01 8294 e70f 0489 f963 e7ef
b401 5c00 07
            ]]></artwork>
          </figure>
          Representing:
          <figure>
            <artwork><![CDATA[
:method: GET
:path: /onoff
:scheme: http
:authority: foo
accept: */*
            ]]></artwork>
          </figure>
        </t>
        <t> Server sends (54 octets):
          <figure>
            <artwork><![CDATA[
0000 2d01 0400 0000 01
880f 1296 d07a be94 03ea 681d 8a08 016d 4039 704e
5c69 a531 68df 0f10 8b1d 75d0 620d 263d 4c79 a68f
0f0d 8265 cf
            ]]></artwork>
          </figure>
          Representing:
          <figure>
            <artwork><![CDATA[
:status: 200
content-type: application/xml
content-length: 36
date: Mon, 09 Mar 2015 06:26:44 GMT
            ]]></artwork>
          </figure>
        </t>
        <t> Server sends (45 octets):
          <figure>
            <artwork><![CDATA[
0000 2400 0100 0000 01
3c4f 6e4f 6666 3e0a 093c 7374 6174 653e 6f66 663c
2f73 7461 7465 3e0a 3c2f 4f6e 4f66 663e
            ]]></artwork>
          </figure>
          Representing:
          <figure>
            <artwork><![CDATA[
<OnOff>
\t<state>off</state>
</OnOff>
            ]]></artwork>
          </figure>
        </t>
      </list>
      </t>
    </section>
    <section title="Comparison">
      <t> In total and ignoring the payload (36 octets), the HTTP/2 flow is 37% smaller than the HTTP/1.1 flow. </t>
      
      <t> The use of additional headers, particularly common headers that are present in the HTTP/2 static table, will result in greater savings. </t>
      
      <t> While not compared here, HTTP/2's ability to reuse connections for multiple streams reduces connection establishment overhead, such as TCP connection establishment and TLS session establishment. </t>
    </section>
  </section>
</section>


    <section title="Acknowledgements">
      <t>
    This document was produced using the xml2rfc tool <xref target="RFC2629"/>. 
      </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC2616;
      &RFC7230;
      &RFC7231;
   </references>

   <references title="Informative References">
      &RFC2629;
      
      <reference anchor="Deuterium" target="http://robbysimpson.org/deuterium/">
        <front>
          <title>Deuterium HTTP/2 Library</title>
          <author initials="R." surname="Simpson" fullname="Robby Simpson" />
          <date month="June" day="23" year="2016" />
        </front>
      </reference>
      
      <reference anchor="Eclipse_survey">
        <front>
          <title>IoT Developer Survey</title>
          <author>         
			<organization>Eclipse Foundation</organization>
			<address/>
		  </author>		
          <date month="April" year="2016" />
        </front>
        </reference>
        
       <reference anchor="IEEE_survey">
        <front>
          <title>Internet of Things: A Survey on Enabling Technologies, Protocols, and Applications</title>
          <author initials="A." surname="Al-Fuqaha et al." fullname="A. Al-Fuqaha et al.">         
			<organization/>
			<address/>
		  </author>		
          <date month="November" year="2015" />
        </front>
        <seriesInfo name="" value="" />
        </reference>
        
      <reference anchor="Going_Dark" target="https://cyber.law.harvard.edu/pubrelease/dont-panic/Dont_Panic_Making_Progress_on_Going_Dark_Debate.pdf">
        <front>
          <title>Dont Panic: Making Progress on Going Dark Debate</title>
          <author initials="" surname="" fullname="Berkman Center" />
          <date month="February" day="1" year="2016" />
        </front>
      </reference>

      <reference anchor="Clapper" target="http://www.theguardian.com/technology/2016/feb/09/internet-of-things-smart-home-devices-government-surveillance-james-clapper">
        <front>
          <title>US intelligence chief: we might use the internet of things to spy on you</title>
          <author initials="" surname="" fullname="The Guardian" />
          <date month="February" day="9" year="2016" />
        </front>
      </reference>

   </references>
  </back>
</rfc>
